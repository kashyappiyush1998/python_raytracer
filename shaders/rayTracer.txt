#version 430

struct Sphere {
    vec3 center;
    float radius;
    vec3 color;
    float roughness;
};

struct Camera {
    vec3 position;
    vec3 forwards;
    vec3 right;
    vec3 up;
};

struct Ray {
    vec3 origin;
    vec3 direction;
};

struct Plane {
    vec3 center;
    float uMin;
    vec3 tangent;
    float uMax;
    vec3 bitangent;
    float vMin;
    vec3 normal;
    float vMax;
    float material;
};

struct RenderState {
    float t;
    vec3 color;
    vec3 emissive;
    vec3 position;
    vec3 normal;
    bool hit;
    float roughness;
};

struct Material {
    vec3 albedo;
    vec3 emissive;
    float gloss;
    vec3 normal;
    vec3 specular;
};

// input/output
layout(local_size_x = 8, local_size_y = 8) in;
layout(rgba32f, binding = 0) uniform image2D img_output;

//Scene data
uniform Camera viewer;
layout(std430, binding = 1) buffer sphereData {
    Sphere[] spheres;
};
layout(std430, binding = 2) buffer planeData {
    Plane[] planes;
};
layout(rgba32f, binding = 3) readonly uniform image2D noise;
layout(rgba32f, binding = 4) readonly uniform image2DArray megaTexture;
uniform ivec2 objectCounts;

RenderState trace(Ray ray);

void hit(Ray ray, Sphere sphere, float tMin, float tMax, inout RenderState renderstate);

void hit(Ray ray, Plane plane, float tMin, float tMax, inout RenderState renderstate);

Material sample_material(float index, float u, float v);

void main() {

    ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
    ivec2 screen_size = imageSize(img_output);

    vec3 finalColor = vec3(0.0);
    for (int i = 0; i < 2; i++) {

        vec2 screenDeflection = imageLoad(
            noise, 
            ivec2(
                pixel_coords.x + i * screen_size.x,
                pixel_coords.y
            )
        ).xy;
        
        float horizontalCoefficient = float(pixel_coords.x) + screenDeflection.x;
        horizontalCoefficient = (horizontalCoefficient * 2 - screen_size.x) / screen_size.x;
        
        float verticalCoefficient = float(pixel_coords.y) + screenDeflection.y;
        verticalCoefficient = (verticalCoefficient * 2 - screen_size.y) / screen_size.y;

        Ray ray;
        ray.origin = viewer.position;
        ray.direction = viewer.forwards + horizontalCoefficient * viewer.right + verticalCoefficient * viewer.up;
    
        vec3 pixel = vec3(1.0);

        for (int bounce = 0; bounce < 4; bounce++) {
        

            RenderState renderState = trace(ray);

            //early exit
            if (!renderState.hit) {
                break;
            }
        
            //unpack color
            pixel = (pixel * renderState.color) + renderState.emissive;

            //set up ray for next trace
            ray.origin = renderState.position;
            ray.direction = reflect(ray.direction, renderState.normal);
            vec3 variation = imageLoad(
                noise, 
                ivec2(
                    pixel_coords.x + bounce * screen_size.x,
                    pixel_coords.y
                )
            ).xyz;
            ray.direction = normalize(ray.direction + renderState.roughness * variation);

        }

        finalColor += 0.5 * pixel;
    }

    imageStore(img_output, pixel_coords, vec4(finalColor,1.0));
}

RenderState trace(Ray ray) {

    RenderState renderState;
    renderState.hit = false;
    renderState.color = vec3(1.0);
    bool hitSomething = false;
    
    float nearestHit = 999999999;
    
    for (int i = 0; i < objectCounts.x; i++) {

        hit(ray, spheres[i], 0.001, nearestHit, renderState);

        if (renderState.hit) {
            nearestHit = renderState.t;
            hitSomething = true;
        }
    }

    for (int i = 0; i < objectCounts.y; i++) {
    
       hit(ray, planes[i], 0.001, nearestHit, renderState);
    
       if (renderState.hit) {
            nearestHit = renderState.t;
            hitSomething = true;
        }
    }

    if (hitSomething) {
        renderState.hit = true;
    }
        
    return renderState;
}

void hit(Ray ray, Sphere sphere, float tMin, float tMax, inout RenderState renderState) {

    vec3 co = ray.origin - sphere.center;
    float a = dot(ray.direction, ray.direction);
    float b = 2 * dot(ray.direction, co);
    float c = dot(co, co) - sphere.radius * sphere.radius;
    float discriminant = b * b - (4 * a * c);
    
    if (discriminant > 0.0) {

        float t = (-b - sqrt(discriminant)) / (2 * a);

        if (t > tMin && t < tMax) {

            renderState.position = ray.origin + t * ray.direction;
            renderState.normal = normalize(renderState.position - sphere.center);
            renderState.t = t;
            renderState.color = sphere.color;
            renderState.roughness = sphere.roughness;
            renderState.emissive = vec3(0);
            renderState.hit = true;
            return;
        }
    }
    renderState.hit = false;
}

void hit(Ray ray, Plane plane, float tMin, float tMax, inout RenderState renderState) {
    
    float denom = dot(plane.normal, ray.direction); 
    
    if (denom < 0.000001) {

        float t = dot(plane.center - ray.origin, plane.normal) / denom; 

        if (t > tMin && t < tMax) {

            vec3 testPoint = ray.origin + t * ray.direction;
            vec3 testDirection = testPoint - plane.center;

            float u = dot(testDirection, plane.tangent);
            float v = dot(testDirection, plane.bitangent);

            if (u > plane.uMin && u < plane.uMax && v > plane.vMin && v < plane.vMax) {

                u = (u - plane.uMin) / (plane.uMax - plane.uMin);
                v = (v - plane.vMin) / (plane.vMax - plane.vMin);

                Material material = sample_material(plane.material, u, v);

                renderState.position = testPoint;
                renderState.t = t;
                renderState.color = material.albedo;
                renderState.emissive = material.emissive;
                renderState.roughness = max(0, 1.0 - material.gloss);

                // maps tangent space into world space
                mat3 TBN = mat3(plane.tangent, plane.bitangent, plane.normal);
                renderState.normal = TBN * material.normal;
                renderState.hit = true;
                return;
            }
        }
    }
    renderState.hit = false;
}

Material sample_material(float index, float u, float v) {

    Material material;
    ivec3 baseCoords = ivec3(floor(1024 * u), floor(1024 * v), index);
    ivec3 nextImage  = ivec3(1024, 0, 0);

    material.albedo     = imageLoad(megaTexture, baseCoords).rgb;
    material.emissive   = imageLoad(megaTexture, baseCoords + nextImage).rgb;
    material.gloss      = imageLoad(megaTexture, baseCoords + 2 * nextImage).r;
    material.normal     = imageLoad(megaTexture, baseCoords + 3 * nextImage).rgb;
    material.normal     = 2.0 * material.normal - vec3(1.0); 
    material.specular   = imageLoad(megaTexture, baseCoords + 4 * nextImage).rgb;

    return material;
}